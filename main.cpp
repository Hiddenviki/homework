//
//  main.cpp
//  –ª–∞–±–∞5
//
//  Created by –í–∏–∫—Ç–æ—Ä–∏—è –í–µ—Å–µ–ª–∫–æ–≤–∞ on 23.11.2021.
//

#include <stdlib.h>
#include <iostream>
#include <sstream>
#include <string>

#include <iomanip>

#include <vector>
#include <cctype>
#include <map>

using namespace std;

string up(string s){
    for (int i = 0; i < s.length(); i++){
        s[i] = toupper(s[i]);
    }
    return s;
}

void read(string s){
    int len = s.length();

    string temp; //—Å—Ç—Ä–æ—á–∫–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å —Å–ª–æ–≤–∞
    vector<string> words; //—Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–ª–æ–≤
    map<string, int> counter; // —Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ö –≤—Ö–æ–∂–µ–¥–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É
    vector<string> similar; // –≤–µ–∫—Ç–æ—Ä (–¥–∏–Ω.–º–∞—Å—Å–∏–≤) –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø —Å–ª–æ–≤
    map<string, vector<int>> pointers; //—Å–ª–æ–≤–∞—Ä—å —É–∫–∞–∑–∞—Ç–µ–ª–µ–π

    //—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ—á–∫—É –∏ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ '\0', —Ç–æ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –∫–∏–¥–∞–µ–º —Å–∞–º–æ —Å–ª–æ–≤–æ
    for (int i = 0; i <= len; i++){
        if (s[i] == ' ' || s[i] == '\0'){
            counter[temp] += 1;
            words.push_back(temp);
            temp = "";
        }
        else{
            temp += s[i];
        }
    }

    //–ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Å–ª–æ–≤–∞—Ä—é, –≥–¥–µ i.first = —Å–ª–æ–≤–æ, i.second = –∫–æ–ª-–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
    for (auto i: counter){
        if (i.second > 1){
            similar.push_back(i.first);
        }
    }

    //–ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤–µ–∫—Ç–æ—Ä—É –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å–ª–æ–≤–∞
    for (auto i: similar){
        cout << "–≠–ª–µ–º–µ–Ω—Ç " << i << " –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤:";
        vector<int> positions;
        int pos = s.find(i, 0);

        while(pos != -1)
        {
            positions.push_back(pos);
            pos = s.find(i,pos+1);
        }

        pointers[i] = positions; // —Ç–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∫–æ–≥–æ-—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —Å–ª–æ–≤–∞ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ —Å –µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞–º–∏

        for (int p = 0; p < positions.size(); p++){
            cout << " " << positions[p] << " ";
            s.replace(positions[p], i.length(), up(i));
            //–≤—ã–≤–æ–¥–∏–º —ç—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã –∏ –ö–ê–ü–°–∏–º —Å–ª–æ–≤–∞
        }

        cout << endl;
    }
    cout << endl;

    //–ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Å–ª–æ–≤–∞—Ä—é —É–∫–∞–∑–∞—Ç–µ–ª–µ–π, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ª–æ–≤–∞—Ä—é –ø–æ –ü–û–í–¢–û–†–Ø–Æ–©–ï–ú–£–°–Ø —Å–ª–æ–≤—É, –ø–æ–ª—É—á–∞—è –∏–Ω–¥–µ–∫—Å—ã –≤—Ö–æ–∂–¥–µ–Ω–∏–π, –ø–µ—á–∞—Ç–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã
    for (auto w : pointers){
        cout << setw(4) << "–î–ª—è –ª–µ–º–µ–Ω—Ç–∞ " << w.first << " —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –Ω–∞ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç:" << endl;
        for (auto i : w.second){
            cout << setw(4) << (int*)(&s[i]) << endl;
        }
        cout << endl;
    }
    cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç:" << endl;
    cout << s << endl;
}

void bts()
{
 
    
    // 1. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    string* AS; // –º–∞—Å—Å–∏–≤ –≤–≤–æ–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫, —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    string* AS2; // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    int count; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ
    string s; // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è-—Å—Ç—Ä–æ–∫–∞
    char buf[80]; // –±—É—Ñ–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫
    

    // 2. –¶–∏–∫–ª –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫, –∫–æ–Ω–µ—Ü –≤–≤–æ–¥–∞ - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ""
    cout << "–≤–≤–æ–¥–∏—Ç–µ —Å—Ç—Ä–æ—á–∫–∫–∏, –≤–≤–æ–¥—è —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ 1 –ø—Ä–æ–±–µ–ª –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. (–ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≤–∞–º –¥–∞–≤–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã —Ç–∫ —ç—Ç–æ —Ç–æ–∂–µ —Å–∏–º–≤–æ–ª—ã. –í—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —á–∏—Å–ª–∞ —ç—Ç–æ —Ç–æ–∂–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã):\n";
    count = 0;
    AS = nullptr;

    do
    {
      
        cout << "=> ";
        cin.getline(buf, 80, '\n'); // —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥—è—Ç—Å—è —Å –ø—Ä–æ–±–µ–ª–∞–º–∏

       
        s = buf;
        read(s);

        if (strcmp(buf, "no") != 0 )
        {

            count++;

            AS2 = new string[count];

            for (int i = 0; i < count - 1; i++)
                AS2[i] = AS[i];

            AS2[count - 1] = s;

            
            if (AS != nullptr)
                delete[] AS;

          
            AS = AS2;
        }
    } while (strcmp(buf, "no") != 0);

    
    if (count > 0){
        cout << "\n–í–æ—Ç –æ–Ω–∏ –ë–¢–° —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑‚ò∫Ô∏èüòç:\n";
        for (int i = 0; i < count; i++)
            cout << "–í —Å—Ç—Ä–æ–∫–µ ‚Ññ" << i + 1 << " –≤—ã –≤–≤–æ–¥–∏–ª–∏: " << AS[i] << ::endl;}
    else
        cout << "–ù–û –í–´ –ù–ò–ß–ï–ì–û –ù–ï –í–í–ï–õ–ò –ê–û–ê–û((";

    // 4. –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ AS –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å, –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –¥–ª—è –Ω–µ–≥–æ
    delete[] AS;
}

int** sozdanie(int n, int m)
{
    int **A;// –°–æ–∑–¥–∞—é –º–∞—Ç—Ä–∏—Ü—É –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    A = new int *[n]; // —á–µ—Ä–µ–∑ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
    for (int i = 0; i < n; i++) {
       A[i] = new int [m];
    }
    return A;
}


void initialize(int** A, int n, int m)// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
{
    srand(time(0));
    for(int i = 0; i < n; i++ )
    {
        for(int j = 0;  j < m;  j++ )
        {
            A[i][j] = rand()%11 - 5 ;
            
            cout<<setw(8)<<setprecision(3)<<A[i][j]<<' '; //—ç—Ç–æ —á—Ç–æ–± –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–ª–æ—Å—å –∫—Ä–∞—Å–∏–≤–æ
        }
    cout << endl;
    }
}

//–∏—â–µ–º –∫–æ–ª-–≤–æ –Ω—É–ª–µ–π –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ
int num_of_z(int n, int m, int ** Arr) {
    int count = 0;
    for (int i = n/2; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(Arr[i][j] == 0) {
                count++;
            }
        }
    }
    return count;
}


//—É—Ö

int* f(int n, int m, int noz, int ** Arr) {
    int *Ptr_arr [noz];
    int counter = 0;
    for (int i = n/2; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(Arr[i][j] == 0) {
                Ptr_arr[counter] = &Arr[i][j];
                counter++;
            }
        }
    }
    return *Ptr_arr;
}

void qq(){
    int s=0;
    setlocale(LC_ALL, "Russian");
     
    int n(0), m(0);
    cout << " –í–≤–µ–¥–∏—Ç–µ —á—ë—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Å—Å–∏–≤–µ" << endl;
    cin >> n;
    s=n;
    if (s%2!=0){
        cout<<"—á–µ–ª —Ç—ã.."<<"\n";
    }
    else{
        cout << " \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ" << endl;
        cin >> m;
        cout << endl;
        int **A;

        A = sozdanie(n,m); // –°–æ–∑–¥–∞—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
            initialize(A, n, m); // –∑–∞–ø–æ–ª–Ω—è—é –º–∞—Ç—Ä–∏—Ü—É



        for ( int i = 0; i < n; i++ )
        {
            delete [] A[ i ];
        }
        delete [] A; // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        
        int k = num_of_z(n, m, A);
        int **B = new int*[k];
        *B = f(n,m,k,A);
        for (int i = 0; i < k; i++) {
            cout << B[i] << endl;
        }
    }
}

int main()
{
    cout<<"\n"<<"—Ç—É—Ç –±—É–¥–µ—Ç –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:"<<"\n";
    bts(); //—ç—Ç–æ –Ω–æ–º–µ—Ä 1
    cout<<"\n"<<"–ù–∞ —ç—Ç–æ–º 1 –Ω–æ–º–µ—Ä –∑–∞–∫–æ–Ω—á–µ–Ω(–∏ —Å–ª–∞–≤–∞ –ë–æ–≥—É)"<<"\n";
    qq(); //—ç—Ç–æ –Ω–æ–º–µ—Ä 2
}
